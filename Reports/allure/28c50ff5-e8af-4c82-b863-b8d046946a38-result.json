{"name": "password-参数验证", "status": "failed", "statusDetails": {"message": "AssertionError: 实际结果： None 和预期结果： null不符 \nExpected: 'null'\n     but: was 'None'", "trace": "self = <src.test_case.shengmeijia.test_v1_account_login.TestV1AccountLogin object at 0x0000016960BB0940>, password = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    @allure.story(\"登录功能验证\")\n    @allure.title(\"password-参数验证\")\n    @pytest.mark.parametrize(\"password\", data_dict['password'])\n    def test_v1_account_login_password(self, password):\n        kwargs = dict()\n        kwargs['headers'] = TestV1AccountLogin.headers\n        data = dict()\n        data['username'] = password['username']\n        data['password'] = password['password']\n        kwargs['json'] = data\n        kwargs['verify'] = False\n        response = TestV1AccountLogin.worker.v1_account_login(**kwargs)\n        # 检查数据正确性\n>       check_resout(response, assert_list, jsondat=password)\n\nsrc\\test_case\\shengmeijia\\test_v1_account_login.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\nassert_list = [{'assert': 'equals', 'check': 'status_code', 'expect': 200, 'msg': 'assert response status code'}, {'assert': 'equals...k': 'headers.Content-Type', 'expect': 'application/json; charset=UTF-8', 'msg': 'assert response header Content-Type'}]\nparams = None, jsondat = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    def check_resout(response, assert_list, params=None, jsondat=None):\n        print(params)\n        # 常规status_code 参数类型校验\n        if len(assert_list) > 0:\n            for check_item in assert_list:\n                if check_item['check'] == \"status_code\" and check_item['assert'] == \"equals\":\n                    assert_that(response.status_code, equal_to(check_item['expect']), check_item['msg'])\n                elif check_item['check'] == \"headers.Content-Type\" and check_item['assert'] == \"equals\":\n                    assert_that(response.headers['Content-Type'], equal_to(check_item['expect']), check_item['msg'])\n                else:\n                    return None\n        temp = None\n        # params 返回数据校验\n        if params:\n            temp = eval(response.text)\n            for key, value in params.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    assert_that(temp.get(new_key), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\n        elif jsondat:\n            print(2)\n            temp = response.json()\n            for key, value in jsondat.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    # if value.isdigit():\n                    #     value = int(value)\n>                   assert_that(str(temp.get(new_key)), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\nE                   AssertionError: 实际结果： None 和预期结果： null不符 \nE                   Expected: 'null'\nE                        but: was 'None'\n\ncommon\\F_check.py:31: AssertionError"}, "attachments": [{"name": "stdout", "source": "a7f31ebd-c346-4883-ac96-e482f760f0dc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "password", "value": "{'key': 'password', 'username': 'admin', 'password': '234567', 'ck-message': '用户名或密码错误', 'ck-code': '500', 'ck-status': '200', 'ck-data': 'null'}"}], "start": 1671136469915, "stop": 1671136470655, "uuid": "92ec49d0-02e9-4b06-9ca7-899c46a01f23", "historyId": "fcfd40daadd23656ce54dc7ddc0bb2c5", "testCaseId": "0c8103e875a704a33c03aa1133d57d8c", "fullName": "src.test_case.shengmeijia.test_v1_account_login.TestV1AccountLogin#test_v1_account_login_password", "labels": [{"name": "story", "value": "登录功能验证"}, {"name": "feature", "value": "登录模块-B端登录接口"}, {"name": "parentSuite", "value": "src.test_case.shengmeijia"}, {"name": "suite", "value": "test_v1_account_login"}, {"name": "subSuite", "value": "TestV1AccountLogin"}, {"name": "host", "value": "howell-computer"}, {"name": "thread", "value": "58204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.test_case.shengmeijia.test_v1_account_login"}]}