{"uid":"20367d0a47572f5a","name":"password-参数验证","fullName":"src.test_case.shengmeijia.test_v1_account_login.TestV1AccountLogin#test_v1_account_login_password","historyId":"fcfd40daadd23656ce54dc7ddc0bb2c5","time":{"start":1671136469915,"stop":1671136470655,"duration":740},"status":"failed","statusMessage":"AssertionError: 实际结果： None 和预期结果： null不符 \nExpected: 'null'\n     but: was 'None'","statusTrace":"self = <src.test_case.shengmeijia.test_v1_account_login.TestV1AccountLogin object at 0x0000016960BB0940>, password = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    @allure.story(\"登录功能验证\")\n    @allure.title(\"password-参数验证\")\n    @pytest.mark.parametrize(\"password\", data_dict['password'])\n    def test_v1_account_login_password(self, password):\n        kwargs = dict()\n        kwargs['headers'] = TestV1AccountLogin.headers\n        data = dict()\n        data['username'] = password['username']\n        data['password'] = password['password']\n        kwargs['json'] = data\n        kwargs['verify'] = False\n        response = TestV1AccountLogin.worker.v1_account_login(**kwargs)\n        # 检查数据正确性\n>       check_resout(response, assert_list, jsondat=password)\n\nsrc\\test_case\\shengmeijia\\test_v1_account_login.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\nassert_list = [{'assert': 'equals', 'check': 'status_code', 'expect': 200, 'msg': 'assert response status code'}, {'assert': 'equals...k': 'headers.Content-Type', 'expect': 'application/json; charset=UTF-8', 'msg': 'assert response header Content-Type'}]\nparams = None, jsondat = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    def check_resout(response, assert_list, params=None, jsondat=None):\n        print(params)\n        # 常规status_code 参数类型校验\n        if len(assert_list) > 0:\n            for check_item in assert_list:\n                if check_item['check'] == \"status_code\" and check_item['assert'] == \"equals\":\n                    assert_that(response.status_code, equal_to(check_item['expect']), check_item['msg'])\n                elif check_item['check'] == \"headers.Content-Type\" and check_item['assert'] == \"equals\":\n                    assert_that(response.headers['Content-Type'], equal_to(check_item['expect']), check_item['msg'])\n                else:\n                    return None\n        temp = None\n        # params 返回数据校验\n        if params:\n            temp = eval(response.text)\n            for key, value in params.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    assert_that(temp.get(new_key), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\n        elif jsondat:\n            print(2)\n            temp = response.json()\n            for key, value in jsondat.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    # if value.isdigit():\n                    #     value = int(value)\n>                   assert_that(str(temp.get(new_key)), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\nE                   AssertionError: 实际结果： None 和预期结果： null不符 \nE                   Expected: 'null'\nE                        but: was 'None'\n\ncommon\\F_check.py:31: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1671136466238,"stop":1671136466465,"duration":227},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestV1AccountLogin","time":{"start":1671136466466,"stop":1671136466466,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: 实际结果： None 和预期结果： null不符 \nExpected: 'null'\n     but: was 'None'","statusTrace":"self = <src.test_case.shengmeijia.test_v1_account_login.TestV1AccountLogin object at 0x0000016960BB0940>, password = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    @allure.story(\"登录功能验证\")\n    @allure.title(\"password-参数验证\")\n    @pytest.mark.parametrize(\"password\", data_dict['password'])\n    def test_v1_account_login_password(self, password):\n        kwargs = dict()\n        kwargs['headers'] = TestV1AccountLogin.headers\n        data = dict()\n        data['username'] = password['username']\n        data['password'] = password['password']\n        kwargs['json'] = data\n        kwargs['verify'] = False\n        response = TestV1AccountLogin.worker.v1_account_login(**kwargs)\n        # 检查数据正确性\n>       check_resout(response, assert_list, jsondat=password)\n\nsrc\\test_case\\shengmeijia\\test_v1_account_login.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>\nassert_list = [{'assert': 'equals', 'check': 'status_code', 'expect': 200, 'msg': 'assert response status code'}, {'assert': 'equals...k': 'headers.Content-Type', 'expect': 'application/json; charset=UTF-8', 'msg': 'assert response header Content-Type'}]\nparams = None, jsondat = {'ck-code': '500', 'ck-data': 'null', 'ck-message': '用户名或密码错误', 'ck-status': '200', ...}\n\n    def check_resout(response, assert_list, params=None, jsondat=None):\n        print(params)\n        # 常规status_code 参数类型校验\n        if len(assert_list) > 0:\n            for check_item in assert_list:\n                if check_item['check'] == \"status_code\" and check_item['assert'] == \"equals\":\n                    assert_that(response.status_code, equal_to(check_item['expect']), check_item['msg'])\n                elif check_item['check'] == \"headers.Content-Type\" and check_item['assert'] == \"equals\":\n                    assert_that(response.headers['Content-Type'], equal_to(check_item['expect']), check_item['msg'])\n                else:\n                    return None\n        temp = None\n        # params 返回数据校验\n        if params:\n            temp = eval(response.text)\n            for key, value in params.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    assert_that(temp.get(new_key), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\n        elif jsondat:\n            print(2)\n            temp = response.json()\n            for key, value in jsondat.items():\n                if key.startswith(\"ck\") and value != \"\":\n                    new_key = key.replace(\"ck-\", \"\")\n                    # if value.isdigit():\n                    #     value = int(value)\n>                   assert_that(str(temp.get(new_key)), equal_to(value), \"实际结果： %s 和预期结果： %s不符 \" % (temp.get(new_key), value))\nE                   AssertionError: 实际结果： None 和预期结果： null不符 \nE                   Expected: 'null'\nE                        but: was 'None'\n\ncommon\\F_check.py:31: AssertionError","steps":[],"attachments":[{"uid":"6d9e61241631a68f","name":"stdout","source":"6d9e61241631a68f.txt","type":"text/plain","size":7}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_TestV1AccountLogin::0","time":{"start":1671136471439,"stop":1671136471439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"story","value":"登录功能验证"},{"name":"feature","value":"登录模块-B端登录接口"},{"name":"parentSuite","value":"src.test_case.shengmeijia"},{"name":"suite","value":"test_v1_account_login"},{"name":"subSuite","value":"TestV1AccountLogin"},{"name":"host","value":"howell-computer"},{"name":"thread","value":"58204-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test_case.shengmeijia.test_v1_account_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"{'key': 'password', 'username': 'admin', 'password': '234567', 'ck-message': '用户名或密码错误', 'ck-code': '500', 'ck-status': '200', 'ck-data': 'null'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"20367d0a47572f5a.json","parameterValues":["{'key': 'password', 'username': 'admin', 'password': '234567', 'ck-message': '用户名或密码错误', 'ck-code': '500', 'ck-status': '200', 'ck-data': 'null'}"]}